<?xml version="1.0"?>
<configuration>
   <placeholders>
      <placeholder id="template_name">Salesforce to Database Account Migration</placeholder>
   </placeholders>
   <sections>
      <section id="use_case">
I want to migrate accounts from Salesforce to Database. 

This Template should serve as a foundation for the process of migrating accounts from Salesforce to Database, being able to specify filtering criteria and desired behavior when an account already exists in the Database. 

As implemented, this Template leverages the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing). 

The batch job is divided in *Process* and *On Complete* stages. 
Migration process starts from fetching all the existing Accounts that match the filter criteria from Salesforce. 
On *Process* stage matched accounts will be grouped and inserted or updated in Database. 
Finally during the *On Complete* stage the Template will both output statistics data into the console and send a notification email with the results of the batch execution. 

The template is covered by the integration tests using the [MUnit](https://docs.mulesoft.com/munit). To be able to run the tests, see the example configuration of the test property file.
      </section>
      <section id="considerations">
         <![CDATA[
**Note:** This particular Anypoint Template illustrate the migration use case between Salesforce and a Database, thus it requires a Database instance to work.
The Anypoint Template comes packaged with a SQL script to create the DB table that uses.
It is the user responsibility to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in [src/main/resources/account.sql](../master/src/main/resources/account.sql)

This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* update SQL script dialect to desired one
* replace MySQL driver library dependency to desired one in [POM](pom.xml)
* update Database Config to suitable connection instead of db:my-sql-connection in global elements in [config.xml](../master/src/main/mule/config.xml)
* update database properties in `mule.*.properties` file
]]>
      </section>
      <section id="running_on_cloudhub">
         <![CDATA[
Once your app is all set and started, supposing you choose as domain name `sfdc2dbaccountmigration` to trigger the use case you just need to hit `http://sfdc2dbaccountmigration.cloudhub.io/migrateaccounts` and report will be sent to the e-mails configured.
]]>
      </section>
      <section id="running_on_standalone">
         <![CDATA[
After this, to trigger the use case you just need to hit the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/migrateaccounts` and this will create a CSV report and send it to the mails set.
]]>
      </section>
      <section id="application_configuration">
         <![CDATA[
**HTTP Connector configuration**
+ http.port `9090`

**Batch Aggregator configuration**
+ page.size `1000`

**Salesforce Connector configuration**
+ sfdc.username `bob.dylan@org`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Database Connector configuration**
+ db.host `localhost`
+ db.port `3306`
+ db.user `joan.baez`
+ db.password `JoanBaez456`
+ db.databasename `template-sfdc2db-account-migration`

**SMTP Services configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `email%40example.com`
+ smtp.password `password`

**Email Details**
+ mail.from `batch.migrateaccounts.migration%40mulesoft.com`
+ mail.to `your.email@gmail.com`
+ mail.subject `Batch Job Finished Report`
]]>
      </section>
      <section id="api_calls">
         <![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***X + X / ${page.size}***

Being ***X*** the number of Accounts to be synchronized on each run.

The division by ***${page.size}*** is because, by default, Accounts are gathered in groups of ${page.size} for each Upsert API Call in the commit step.

For instance if 10 records are fetched from origin instance, then 20 api calls will be made (10 + 10).
]]>
      </section>
      <section id="default_endpoints_xml">
         <![CDATA[
This is the file where you will found the inbound and outbound sides of your integration app.
This Template has only an [HTTP Listener Connector](http://www.mulesoft.org/documentation/display/current/HTTP+Listener+Connector) as the way to trigger the use case.

$H$H# Inbound Flow
**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either in a property file or in CloudHub environment variables.
+ The path configured by default is `migrateaccounts` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
+ The endpoint is configured as a *request-response* since as a result of calling it the response will be the total of Accounts synced and filtered by the criteria specified.
]]>
      </section>
      <section id="default_business_logic_xml">
         <![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of excecuting the logic.
For the purpose of this particular Template the *mainFlow* uses a [Batch Job](http://www.mulesoft.org/documentation/display/current/Batch+Processing), which handles all the logic of it.
]]>
      </section>
   </sections>
</configuration>
